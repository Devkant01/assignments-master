// I solved this assignment 


/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

const express = require('express');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;
app.use(bodyParser.json());

const todos = [{
  Id: 1,
  title: "Learn front-end",
  completed: false,
  description: "start with learning HTML and CSS"
},
  {
    Id: 2,
    title: "Learn Back-end",
    completed: false,
    description: "Start wiht Express and databases"
  }, {
    Id: 3,
    title: "Buy groceries",
    completed: true,
    description: "I should buy groceries"
  }]

app.get('/', function (req, res) {
  res.send('<h1 style="text-align:center; color:dodgerblue;">Hello User</h1><h3 style="text-align:center; color:purple;">To see todos go to route>> todos');
})

// 1.retreive all todos 
app.get('/todos', function (req, res) {
  const totalTodos = todos.length;
  res.json({totalTodos, todos: todos});
})

// 2.retreive todo by id
app.get('/todos/:id', function (req, res, next) {
  const id = parseInt(req.params.id);
  if (id > todos.length || id < 1) {
    throw Error("Todo item not found. Please check the ID and try again.");
  }
  else {
    res.json(todos[id - 1]);
  }
})

// 3.Create a new todo item
function addNewTodo(title, completed, description) {
  const newTodo = {
    Id: todos.length + 1,
    title: title,
    completed: completed,
    description: description
  };  
  todos.push(newTodo);
  return newTodo;
}

app.post('/todos', function (req, res) {
  const { title, completed, description } = req.body;
  const inserted = addNewTodo(title, completed, description);
  res.status(201).json({ msg: "Todo Inserted", inserted });
})

// 4.Update an existing todo item by ID
app.put('/todos/:id', function (req, res) {
  const id = req.params.id;
  if (id > todos.length || id < 1) {
    throw Error("Todo item not found. Please check the ID and try again.");
  } else {
    const selectedTodo = todos[id - 1];    
    const { title, completed } = req.body;
    selectedTodo.title = title;
    selectedTodo.completed = completed;
    console.log(selectedTodo.completed);
    
    res.status(200).send(`Todos with id:${id} updated Successfully`);
  }
})

// 5.Delete a todo item by ID
app.delete('/todos/:id', function (req, res) {
  const id = parseInt(req.params.id);
  if (id > todos.length || id < 1) {
    throw Error("Todo item not found. Please check the ID and try again.");
  } else {
    todos.splice(id - 1, 1);
    for (let i = id - 1; i < todos.length; i++) {
      todos[i].Id -= 1;
    }
    res.status(200).send(`Todos with id:${id} removed Successfully`);
  }
})

// for all other routes
app.all('/*', (req, res) => {
  res.status(404).send('<h1 style="text-align:center; color:red; margin:45vh 0; text-decoration:2px solid underline black;">Route not found</h1>');

})

app.use(function errorHandler(err, req, res, next) {
  if (res.headersSent) {
    return next(err);
  }
  res.status(404).send(`${err}`);
})

app.listen(port, function () {
  console.log(`Server is running on localhost:${port}`);
})


module.exports = app;